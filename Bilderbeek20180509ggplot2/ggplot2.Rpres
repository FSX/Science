ggplot2
========================================================
author: Richel Bilderbeek
date: 2018-05-09
autosize: true

```{r echo=FALSE}
# Default:
# width: 960
# height: 700

# Default + 10%
# width: 1056
# height: 770


# Add this here above to set the slide sizes
# width: 1920
# height: 1080
```

[https://github.com/richelbilderbeek/Science](https://github.com/richelbilderbeek/Science)  ![CC-BY-NC-SA](CC-BY-NC-SA.png)

![RuG and GELIFES and TECE logo](footer.png)

```{r echo=FALSE}
set.seed(44)
```

```{r echo=FALSE}
# From http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
#
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
```

```{r echo=FALSE}
# From https://stackoverflow.com/a/8197703
gg_color_hue <- function(n) {
  hues = seq(15, 375, length = n + 1)
  hcl(h = hues, l = 65, c = 100)[1:n]
}

get_color <- function(i, n) {
  testit::assert(i >= 1)
  testit::assert(n >= 1)
  testit::assert(i <= n)
  gg_color_hue(n)[i]
}
```

Desire
========================================================
title: false

```{r echo=FALSE, fig.width=12}
meme::meme(img = system.file("success.jpg", package="meme"),
  "One million measurements",
  "One beautiful and clear plot",
  size = 5.5
  )
```

Non-goal
========================================================

![](ggplot2_examples.png)

Goal
========================================================
![ggplot2 logo](ggplot2_logo.png)
***
- Share philosophy of `ggplot2`
- Correct three beginner mistakes

```{r}
library(ggplot2)
```


Philosophy
========================================================
![Leland Wilkinson](leland_wilkinson.jpg)
***
![Grammar of Graphics](grammar_of_graphics_book.jpg)

Philosophy
========================================================

![Grammar of Graphics](grammar_of_graphics.png)

Philosophy
========================================================
![Hadley Wickham](hadley_wickham.jpg)
***
 * Grammar of Graphics
 * Tidy Data

![R for Data Science](r_for_data_science.png)
*Wickham, & Grolemund. R for data science. 2016*

Messy data
========================================================

```{r}
messy_df <- data.frame(
  matrix(rnorm(n = 1000), ncol = 1000)
)
colnames(messy_df) <- paste0(
  "z", seq(1, 1000)
)
knitr::kable(messy_df[1, 1:6])
```

Plotting messy data is easy without ggplot2
========================================================

```{r fig.width=12}
hist(t(messy_df))
```

Plotting messy data is hard in ggplot2
========================================================

```{r fig.width=12}
ggplot(
  messy_df, aes(z1)
) + geom_histogram(binwidth = 0.5)
```

Plotting messy data is ugly in ggplot2
========================================================

```{r fig.width=12}
ggplot(
  data.frame(z = t(messy_df[1, ])[, 1]),
  aes(z)
) + geom_histogram(binwidth = 0.5)
```

Tidy Data
========================================================
![tidyr logo](tidyr_logo.png)
***
 * One measurement per row, 'long form'
 * Factors as factors

```{r}
library(tidyr)
```


Wrangling messy data to Tidy Data
========================================================

```{r}
df <- gather(messy_df, "replicate", "value")
knitr::kable(df[1:6, ])
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(value)) +
  geom_histogram(binwidth = 0.5)
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = value)) +
  geom_density()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = "", y = value)) +
  geom_boxplot()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = "", y = value)) +
  geom_violin()
```

Messy data
========================================================

```{r}
messy_df <- data.frame(
  matrix(rnorm(n = 2002), ncol = 1001, nrow = 2)
)
colnames(messy_df) <- c("treatment", paste0(
  "z", seq(1, 1000))
)
messy_df[1, 1] <- "A"
messy_df[2, 1] <- "B"
knitr::kable(messy_df[, 1:6])
```

Plotting messy data is hard in ggplot2
========================================================

```{r fig.width=12}
ggplot(
  messy_df, aes(z1)
) + geom_histogram(binwidth = 0.5)
```

Plotting messy data is ugly in ggplot2
========================================================

```{r fig.width=12}
ggplot(
  data.frame(
    treatment = rep(messy_df$treatment, each = 1000),
    z = c(t(messy_df[1, 2:1001])[, 1], t(messy_df[2, 2:1001])[, 1])
  ),
  aes(z, fill = treatment)
) + geom_histogram(binwidth = 0.5, alpha = 0.5, position = "identity")
```

Wrangling messy data to Tidy Data
========================================================

```{r}
df <- gather(messy_df, "replicate", "value", z1:z1000)
knitr::kable(df[1:6, ])
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(value)) +
  geom_histogram(binwidth = 0.5)
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = value, fill = treatment)) +
  geom_histogram(binwidth = 0.5, position = "identity", alpha = 0.5)
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = value)) +
  geom_density()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = value, fill = treatment)) +
  geom_density(alpha = 0.5)
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = "", y = value)) +
  geom_boxplot()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = treatment, y = value)) +
  geom_boxplot()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = "", y = value)) +
  geom_violin()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = treatment, y = value)) +
  geom_violin()
```

Messy data
========================================================

```{r}
messy_df <- data.frame(
  treatment = rep(c(1, 2), times = 1000),
  value = rnorm(n = 2000)
)
knitr::kable(head(messy_df))
```

Plotting messy data is hard and ugly in ggplot2
========================================================

```{r fig.width=12}
ggplot(messy_df, aes(value)) +
  geom_histogram(binwidth = 0.5)
```

Plotting messy data is hard and ugly in ggplot2
========================================================

```{r fig.width=12}
ggplot(position = "identity") + 
  geom_histogram(data = messy_df[ messy_df$treatment == 1,  ], aes(x = value), fill = get_color(1,2)) + 
  geom_histogram(data = messy_df[ messy_df$treatment == 2,  ], aes(x = value), fill = get_color(2,2), alpha = 0.5)
```

Wrangling messy data to Tidy Data
========================================================

```{r}
df <- messy_df
df$treatment <- as.factor(df$treatment)
knitr::kable(df[1:6, ])
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(value)) +
  geom_histogram(binwidth = 0.5)
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = value, fill = treatment)) +
  geom_histogram(binwidth = 0.5, position = "identity", alpha = 0.5)
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = value)) +
  geom_density()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = value, fill = treatment)) +
  geom_density(alpha = 0.5)
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = "", y = value)) +
  geom_boxplot()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = treatment, y = value)) +
  geom_boxplot()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = "", y = value)) +
  geom_violin()
```

Plotting Tidy Data is easy
========================================================

```{r fig.width=12}
ggplot(df, aes(x = treatment, y = value)) +
  geom_violin()
```

Conclusions
========================================================

 * Plotting messy data is hard and/or ugly in `ggplot2`
 * Use Tidy Data (don't forget factors)
 * Tidy Data and `ggplot2` go together well

Questions?
========================================================

![](meme_plot_messy_data.jpg)

[https://github.com/richelbilderbeek/Science](https://github.com/richelbilderbeek/Science)  ![CC-BY-NC-SA](CC-BY-NC-SA.png)


